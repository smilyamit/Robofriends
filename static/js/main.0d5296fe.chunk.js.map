{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredrobots","filter","robot","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAgBeA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACxB,OACC,yBAAKC,UAAY,uDAChB,yBAAKC,IAAM,SAASC,IAAG,mCAA+BL,EAA/B,cACtB,6BACC,4BAAKC,GACL,2BAAIC,MCcMI,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACG,6BAEDA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACC,kBAAC,EAAD,CACAC,IAAOD,EACVV,GAAKO,EAAOG,GAAGV,GACfC,KAAOM,EAAOG,GAAGT,KACjBC,MAAOK,EAAOG,GAAGR,aCDRU,EAXG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKX,UAAY,OAChB,2BAAOA,UAAU,mCAChBY,KAAK,SACLC,YAAa,gBACbC,SAAYH,MCCDI,G,MAPA,SAACC,GACf,OACC,yBAAKC,MAAQ,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,YCsCGC,E,YApCd,aAAc,IAAD,8BACZ,+CAYDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAZzC,EAAKC,MAAQ,CACZxB,OAAS,GACHM,YAAa,IAJR,E,iFAOW,IAAD,OACnBmB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKR,SAAS,CAACrB,OAAQ6B,S,+BAM/B,IAAD,EACsBC,KAAKN,MAA5BxB,EADC,EACDA,OAAQM,EADP,EACOA,YACTyB,EAAiB/B,EAAOgC,QAAO,SAAAC,GACpC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS7B,EAAY4B,kBAEtD,OAAQlC,EAAOoC,OAGb,yBAAKxC,UAAY,MAChB,2CACA,kBAAC,EAAD,CAAWW,aAAgBuB,KAAKX,iBAFjC,MAGC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUnB,OAAU+B,MANvB,4C,GAvBgBM,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDwH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.0d5296fe.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({id, name, email}) => {              //receiving props and destructuring using {}\r\n\treturn (\r\n\t\t<div className = 'tc bg-light-green dib br3 pa2 ma2 grow bw2 shadow-5'>   \r\n\t\t\t<img alt = 'robots' src= {`https://www.robohash.org/${id}?200x200`}/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h1>{name}</h1>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card;\r\n//tc-text centered dib-display inline block br-border, pa-padding, ma-margin grow-name of animation, bw-border width","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n  return (\r\n\t    <div>\r\n\t    {\r\n\t\t\t robots.map((user, i) => {\r\n\t\t\t     return (\r\n\t\t\t\t     <Card \r\n\t\t\t\t     key = {i}\r\n\t\t\t\t\t id ={robots[i].id}\r\n\t\t\t\t\t name ={robots[i].name} \r\n\t\t\t\t\t email={robots[i].email}\r\n\t\t\t\t\t />\r\n\t\t\t    );\t \r\n\t\t\t})\r\n\t\t }\r\n\t\t</div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n\treturn (\r\n\t\t<div className = 'pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t type='search'\r\n\t\t\t placeholder ='search robots'\r\n\t\t\t onChange = {searchChange}\r\n\t\t\t />           \r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;\r\n\r\n// input type together is used to create box","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style= {{overflowY: 'Scroll', border: '5px solid black', height: '500px'}}>\r\n\t    {props.children}\r\n\t    </div>\r\n\t)\r\n};\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends React.Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {               // inorder to use this to call the constructor we need super\r\n\t\t\trobots : [],\r\n\t        searchField: ''\r\n\t\t}\r\n\t}\r\n    componentDidMount() {\r\n    \tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t    \t.then(response=>response.json())\r\n\t    \t.then(users=>this.setState({robots: users})) \t\r\n    }\r\n   \r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchField: event.target.value })\r\n\t}\r\n\trender() {\r\n\t\tconst {robots, searchField} = this.state\r\n\t\tconst filteredrobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\t\treturn !robots.length ?\r\n\t\t<h1> loading</h1> :\r\n\t       (\r\n\t\t\t\t<div className = 'tc'>\r\n\t\t\t\t\t<h1>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>   {/*This SearchBox component we have to create as we dont have any like h1 tag */}\r\n\t\t\t\t\t<Scroll>                                          \r\n\t\t\t\t\t<CardList robots = {filteredrobots}/>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n        \r\n\t}\r\n\t\r\n}\r\nexport default App;\r\n// note in appp.js robots is a state while in cardList robots is a prop\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(<App/>,\tdocument.getElementById(\"root\")); // robots is a property\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}